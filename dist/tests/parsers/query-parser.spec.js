"use strict";
const test = require('tape');
const query_parser_1 = require('../../main/parsers/query-parser');
const extract_quoted_1 = require('../../main/parsers/extract-quoted');
const extract_parenthesys_1 = require('../../main/parsers/extract-parenthesys');
const extract_loose_words_1 = require('../../main/parsers/extract-loose-words');
const extract_predicates_1 = require('../../main/parsers/extract-predicates');
const extract_NOT_1 = require('../../main/parsers/extract-NOT');
const extract_explicit_boolean_1 = require('../../main/parsers/extract-explicit-boolean');
const extract_implicit_boolean_1 = require('../../main/parsers/extract-implicit-boolean');
test('should parse a simple query', (t) => {
    t.plan(1);
    const result = query_parser_1.parseString('cancer');
    const term = { text: 'cancer' };
    t.deepEqual(result, term);
});
test('should parse implicit bo', (t) => {
    t.plan(1);
    const result = query_parser_1.parseString('cancer brain');
    const tree = { value: 'AND', left: { text: 'cancer' }, right: { text: 'brain' } };
    t.deepEqual(result, tree);
});
test('should parse explicit bo', (t) => {
    t.plan(1);
    const result = query_parser_1.parseString('cancer AND brain');
    const tree = { value: 'AND', left: { text: 'cancer' }, right: { text: 'brain' } };
    t.deepEqual(result, tree);
});
test('should parse explicit bo', (t) => {
    t.plan(1);
    const result = query_parser_1.parseString('cancer NOT brain');
    const tree = {
        value: 'AND',
        left: {
            text: 'cancer'
        },
        right: {
            value: 'NOT',
            right: {
                text: 'brain'
            },
            left: null
        }
    };
    t.deepEqual(result, tree);
});
test('should parse predicates', (t) => {
    t.plan(1);
    const result = query_parser_1.parseString('tissue:brain');
    const filter = { predicate: 'tissue', text: 'brain' };
    t.deepEqual(result, filter);
});
test('parenthesys does not extract other stuff', t => {
    t.plan(1);
    const result = extract_parenthesys_1.default('this is not "extracted"');
    t.deepEqual([], result);
});
test('parenthesys concat results to acc', t => {
    t.plan(1);
    const output = { type: 'term', from: 0, to: 4, term: 'test' };
    const result = extract_parenthesys_1.default('no match here', [output]);
    t.deepEqual(result, [output]);
});
test('extract simple parenthesys', t => {
    t.plan(2);
    const result = extract_parenthesys_1.default('(1)');
    t.deepEqual(result, [{ type: 'group', from: 0, to: 3, term: '1' }]);
    t.equal('(1)'.substring(result[0].from, result[0].to), '(1)');
});
test('extract only group', t => {
    t.plan(1);
    const result = extract_parenthesys_1.default('one two (group here)');
    t.deepEqual(result, [{ type: 'group', from: 8, to: 20, term: 'group here' }]);
});
test('extract multiple groups', t => {
    t.plan(1);
    const result = extract_parenthesys_1.default('(one) (two)');
    t.deepEqual(result, [
        { type: 'group', from: 0, to: 5, term: 'one' },
        { type: 'group', from: 6, to: 11, term: 'two' }
    ]);
});
test('extract super-group of embedded', t => {
    t.plan(1);
    const result = extract_parenthesys_1.default('(one OR (two AND three))');
    t.deepEqual(result, [
        { type: 'group', from: 0, to: 24, term: 'one OR (two AND three)' }
    ]);
});
test('quotes does not extract other stuff', t => {
    t.plan(1);
    const result = extract_quoted_1.default('this is (not extracted)');
    t.deepEqual([], result);
});
test('extract quoted of simple string', t => {
    t.plan(1);
    const result = extract_quoted_1.default('"test"');
    t.deepEqual([{ type: 'term', from: 0, to: 6, term: 'test' }], result);
});
test('concat to previous extracted items', t => {
    t.plan(1);
    const result = extract_quoted_1.default('not match', [{ type: 'term', from: 0, to: 6, term: 'test' }]);
    t.deepEqual([{ type: 'term', from: 0, to: 6, term: 'test' }], result);
});
test('extract multiple quoted entries from string', t => {
    t.plan(3);
    const str = '"1" n "2"';
    const result = extract_quoted_1.default(str);
    t.deepEqual([
        { type: 'term', from: 0, to: 3, term: '1' },
        { type: 'term', from: 6, to: 9, term: '2' }
    ], result);
    t.deepEqual('"1"', str.substring(result[0].from, result[0].to));
    t.deepEqual('"2"', str.substring(result[1].from, result[1].to));
});
test('extract single quoted with spaces', t => {
    t.plan(2);
    const str = '"hello world"';
    const result = extract_quoted_1.default(str);
    t.deepEquals([
        { type: 'term', from: 0, to: 13, term: 'hello world' }
    ], result);
    t.deepEquals(str, str.substring(result[0].from, result[0].to));
});
test('parse loose words of empty', t => {
    t.plan(1);
    const result = extract_loose_words_1.default('');
    t.deepEquals(result, []);
});
test('parse loose words concats the accumulated tokens', t => {
    t.plan(1);
    const acc = [{ type: 'term', from: 0, to: 4, term: 'test' }];
    const result = extract_loose_words_1.default('', acc);
    t.deepEquals(result, acc);
});
test('parse loose words simple', t => {
    t.plan(1);
    const result = extract_loose_words_1.default('test');
    t.deepEquals(result, [{ type: 'term', from: 0, to: 4, term: 'test' }]);
});
test('parse loose words multiple', t => {
    t.plan(1);
    const result = extract_loose_words_1.default('hello world');
    t.deepEquals(result, [
        { type: 'term', from: 0, to: 5, term: 'hello' },
        { type: 'term', from: 6, to: 11, term: 'world' }
    ]);
});
test('parse simple predicates', function (t) {
    t.plan(1);
    const result = extract_predicates_1.default('hello:world');
    t.deepEquals(result, [
        { type: 'filter', from: 0, to: 11, term: 'world', predicate: 'hello' }
    ]);
});
test('parse predicates from longer string', function (t) {
    t.plan(2);
    let result = extract_predicates_1.default('assay:RNA-Seq cancer');
    t.deepEquals(result, [
        { type: 'filter', from: 0, to: 13, term: 'RNA-Seq', predicate: 'assay' }
    ]);
    result = extract_predicates_1.default('cancer AND assay:RNA-Seq AND ');
    t.deepEquals(result, [
        { type: 'filter', from: 11, to: 24, term: 'RNA-Seq', predicate: 'assay' }
    ]);
});
test('parse multiple predicates', function (t) {
    t.plan(1);
    const result = extract_predicates_1.default('glioblastoma assay:RNA-Seq assay:RNA-seq');
    t.deepEquals(result, [
        { type: 'filter', from: 13, to: 26, term: 'RNA-Seq', predicate: 'assay' },
        { type: 'filter', from: 27, to: 40, term: 'RNA-seq', predicate: 'assay' }
    ]);
});
test('parse with spaces around colon', function (t) {
    t.plan(1);
    const result = extract_predicates_1.default('glioblastoma assay : RNA-Seq assay:RNA-seq');
    t.deepEquals(result, [
        { type: 'filter', from: 13, to: 28, term: 'RNA-Seq', predicate: 'assay' },
        { type: 'filter', from: 29, to: 42, term: 'RNA-seq', predicate: 'assay' }
    ]);
});
test('predicate parsing should support quoted terms', function (t) {
    t.plan(2);
    let result = extract_predicates_1.default('assay:"Whole Genome Sequencing"');
    t.deepEquals(result, [
        { type: 'filter', from: 0, to: 31, term: 'Whole Genome Sequencing', predicate: 'assay' }
    ]);
    result = extract_predicates_1.default('glioblastoma assay : RNA-Seq assay:RNA-seq assay : "Whole Genome Sequencing" AND');
    t.deepEquals(result, [
        { type: 'filter', from: 13, to: 28, term: 'RNA-Seq', predicate: 'assay' },
        { type: 'filter', from: 29, to: 42, term: 'RNA-seq', predicate: 'assay' },
        { type: 'filter', from: 43, to: 76, term: 'Whole Genome Sequencing', predicate: 'assay' }
    ]);
});
test('predicate parsing should be robust to empty strings', function (t) {
    t.plan(1);
    const result = extract_predicates_1.default('');
    t.deepEquals(result, []);
});
test('predicate parsing should be robust to regular tokens', function (t) {
    t.plan(1);
    const result = extract_predicates_1.default('cancer');
    t.deepEquals(result, []);
});
test('predicate parsing should be robust to stray colons', function (t) {
    t.plan(3);
    let result = extract_predicates_1.default('cancer:');
    t.deepEquals(result, []);
    result = extract_predicates_1.default('cancer :');
    t.deepEquals(result, []);
    result = extract_predicates_1.default('cancer : ');
    t.deepEquals(result, []);
});
test('predicate parser should add results to accumulator', function (t) {
    t.plan(1);
    const result = extract_predicates_1.default('cancer', [
        { type: 'filter', from: 13, to: 28, term: 'RNA-Seq', predicate: 'assay' },
        { type: 'filter', from: 29, to: 42, term: 'RNA-seq', predicate: 'assay' },
        { type: 'filter', from: 43, to: 76, term: 'Whole Genome Sequencing', predicate: 'assay' }
    ]);
    t.deepEquals(result, [
        { type: 'filter', from: 13, to: 28, term: 'RNA-Seq', predicate: 'assay' },
        { type: 'filter', from: 29, to: 42, term: 'RNA-seq', predicate: 'assay' },
        { type: 'filter', from: 43, to: 76, term: 'Whole Genome Sequencing', predicate: 'assay' }
    ]);
});
test('tokenStripper - basic usage', t => {
    t.plan(1);
    const str = 'test';
    const tokens = [{ type: 'term', from: 0, to: 4, term: 'test' }];
    const result = query_parser_1.tokenStripper(str, tokens);
    t.deepEqual(result, []);
});
test('tokenStripper - multiple tokens', t => {
    t.plan(1);
    const str = '"quoted here" AND (group)';
    const tokens = [
        { type: 'term', from: 0, to: 13, term: 'quoted here' },
        { type: 'group', from: 18, to: 25, term: 'group' }
    ];
    const result = query_parser_1.tokenStripper(str, tokens);
    t.deepEqual(result, [{ from: 13, to: 18, term: ' AND ' }]);
});
test('tokenStripper - multiple tokens and nothing left', t => {
    t.plan(1);
    const str = 'one two';
    const tokens = [
        { type: 'term', from: 0, to: 3, term: 'one' },
        { type: 'bo', from: 3, to: 4, term: 'AND' },
        { type: 'term', from: 4, to: 7, term: 'two' }
    ];
    const result = query_parser_1.tokenStripper(str, tokens);
    t.deepEqual(result, []);
});
test('tokenStripper - multiple tokens and stuff left', t => {
    t.plan(1);
    const str = 'one two tree four';
    const tokens = [
        { type: 'term', from: 0, to: 3, term: 'one' },
        { type: 'term', from: 4, to: 7, term: 'two' },
        { type: 'term', from: 8, to: 12, term: 'three' }
    ];
    const result = query_parser_1.tokenStripper(str, tokens);
    t.deepEqual(result, [{ from: 3, to: 4, term: ' ' }, { from: 7, to: 8, term: ' ' }, { from: 12, to: 17, term: ' four' }]);
});
test('tokenStripper - strip with nothing', t => {
    t.plan(1);
    const str = 'one';
    const tokens = [];
    const result = query_parser_1.tokenStripper(str, tokens);
    t.deepEqual(result, [{ from: 0, to: 3, term: 'one' }]);
});
test('extract starting NOT', t => {
    t.plan(1);
    const input = 'NOT glaucoma';
    const result = [{ type: 'not', from: 0, to: 4, term: 'NOT' }];
    t.deepEqual(extract_NOT_1.default(input), result);
});
test('extract NOT from implicit AND NOT', t => {
    t.plan(1);
    const input = 'a NOT glaucoma';
    const result = [{ type: 'not', from: 2, to: 6, term: 'NOT' }];
    t.deepEqual(extract_NOT_1.default(input), result);
});
test('extract NOT from explicit AND NOT', t => {
    t.plan(1);
    const input = 'a AND NOT something';
    const result = [{ type: 'not', from: 6, to: 10, term: 'NOT' }];
    t.deepEqual(extract_NOT_1.default(input), result);
});
test('boolean parser', t => {
    t.plan(1);
    const input = 'glaucoma AND ';
    const result = [{ type: 'bo', from: 8, to: 13, term: 'AND' }];
    t.deepEqual(extract_explicit_boolean_1.default(input), result);
});
test('boolean parser OR', t => {
    t.plan(1);
    const input = 'one OR another';
    const result = [{ type: 'bo', from: 3, to: 7, term: 'OR' }];
    t.deepEqual(extract_explicit_boolean_1.default(input), result);
});
test('boolean parser multiple', t => {
    t.plan(1);
    const input = 'one AND another OR these';
    const result = [{ type: 'bo', from: 3, to: 8, term: 'AND' }, { type: 'bo', from: 15, to: 19, term: 'OR' }];
    t.deepEqual(extract_explicit_boolean_1.default(input), result);
});
test('boolean parser implicit simple', t => {
    t.plan(1);
    const input = ' ';
    const result = [{ type: 'bo', from: 0, to: 1, term: 'AND' }];
    t.deepEqual(extract_implicit_boolean_1.default(input), result);
});
test('boolean parser implicit multiple spaces', t => {
    t.plan(1);
    const input = '   ';
    const result = [{ type: 'bo', from: 0, to: 1, term: 'AND' }];
    t.deepEqual(extract_implicit_boolean_1.default(input), result);
});
test('boolean parser implicit sandwitch', t => {
    t.plan(1);
    const input = 'a b';
    const result = [{ type: 'bo', from: 1, to: 2, term: 'AND' }];
    t.deepEqual(extract_implicit_boolean_1.default(input), result);
});
test('boolean parser implicit double', t => {
    t.plan(1);
    const input = ' a ';
    const result = [{ type: 'bo', from: 0, to: 1, term: 'AND' }, { type: 'bo', from: 2, to: 3, term: 'AND' }];
    t.deepEqual(extract_implicit_boolean_1.default(input), result);
});
test('tokenizer - extract tokens from simple strng', t => {
    t.plan(1);
    const str = 'test';
    const tokens = [{ type: 'term', from: 0, to: 4, term: 'test' }];
    const result = query_parser_1.tokenizer(str);
    t.deepEqual(result, tokens);
});
test('tokenizer - extract tokens from group string', t => {
    t.plan(1);
    const str = '(one OR two)';
    const tokens = [
        { type: 'group', from: 0, to: 12, term: 'one OR two' }
    ];
    const result = query_parser_1.tokenizer(str);
    t.deepEqual(result, tokens);
});
test('tokenizer - extract tokens from simple explicit boolean', t => {
    t.plan(1);
    const str = 'one AND two';
    const tokens = [
        { type: 'term', from: 0, to: 3, term: 'one' },
        { type: 'bo', from: 3, to: 8, term: 'AND' },
        { type: 'term', from: 8, to: 11, term: 'two' }
    ];
    const result = query_parser_1.tokenizer(str);
    t.deepEqual(result, tokens);
});
test('tokenizer - extract tokens from simple implicit boolean', t => {
    t.plan(1);
    const str = 'one two';
    const tokens = [
        { type: 'term', from: 0, to: 3, term: 'one' },
        { type: 'bo', from: 3, to: 4, term: 'AND' },
        { type: 'term', from: 4, to: 7, term: 'two' }
    ];
    const result = query_parser_1.tokenizer(str);
    t.deepEqual(result, tokens);
});
test('tokenizer - extract tokens from all parsers', t => {
    t.plan(1);
    const str = 'one "two" NOT (group)';
    const tokens = [
        { type: 'term', from: 0, to: 3, term: 'one' },
        { type: 'bo', from: 3, to: 4, term: 'AND' },
        { type: 'term', from: 4, to: 9, term: 'two' },
        { type: 'bo', from: 9, to: 10, term: 'AND' },
        { type: 'not', from: 10, to: 14, term: 'NOT' },
        { type: 'group', from: 14, to: 21, term: 'group' }
    ];
    const result = query_parser_1.tokenizer(str);
    t.deepEqual(result, tokens);
});
//# sourceMappingURL=data:application/json;base64,