"use strict";
var test = require('tape');
var query_parser_1 = require('../../main/parsers/query-parser');
var extract_quoted_1 = require('../../main/parsers/extract-quoted');
var extract_parenthesys_1 = require('../../main/parsers/extract-parenthesys');
var extract_loose_words_1 = require('../../main/parsers/extract-loose-words');
var extract_predicates_1 = require('../../main/parsers/extract-predicates');
var extract_NOT_1 = require('../../main/parsers/extract-NOT');
var extract_explicit_boolean_1 = require('../../main/parsers/extract-explicit-boolean');
var extract_implicit_boolean_1 = require('../../main/parsers/extract-implicit-boolean');
test.skip('should parse a simple query', function (t) {
    t.plan(1);
    var result = query_parser_1.parseString('cancer');
    var term = { text: 'cancer' };
    t.deepEqual(result, term);
});
//TODO: Resolve test problems with ids
test.skip('should parse implicit bo', function (t) {
    t.plan(1);
    var result = query_parser_1.parseString('cancer brain');
    var tree = { value: 'AND', left: { text: 'cancer' }, right: { text: 'brain' } };
    t.deepEqual(result, tree);
});
//TODO: Resolve test problems with ids
test.skip('should parse explicit bo', function (t) {
    t.plan(1);
    var result = query_parser_1.parseString('cancer AND brain');
    var tree = { value: 'AND', left: { text: 'cancer' }, right: { text: 'brain' } };
    t.deepEqual(result, tree);
});
//TODO: Resolve test problems with ids
test.skip('should parse explicit bo', function (t) {
    t.plan(1);
    var result = query_parser_1.parseString('cancer NOT brain');
    var tree = {
        value: 'AND',
        left: {
            text: 'cancer'
        },
        right: {
            value: 'NOT',
            right: {
                text: 'brain'
            },
            left: null
        }
    };
    t.deepEqual(result, tree);
});
test('should parse predicates', function (t) {
    t.plan(4);
    var result = query_parser_1.parseString('tissue:brain');
    t.assert(result.hasOwnProperty('predicate'));
    t.equals(result.predicate, 'tissue');
    t.assert(result.hasOwnProperty('text'));
    t.equals(result.text, 'brain');
});
test('parenthesys does not extract other stuff', function (t) {
    t.plan(1);
    var result = extract_parenthesys_1.default('this is not "extracted"');
    t.deepEqual([], result);
});
test('parenthesys concat results to acc', function (t) {
    t.plan(1);
    var output = { type: 'term', from: 0, to: 4, term: 'test' };
    var result = extract_parenthesys_1.default('no match here', [output]);
    t.deepEqual(result, [output]);
});
test('extract simple parenthesys', function (t) {
    t.plan(2);
    var result = extract_parenthesys_1.default('(1)');
    t.deepEqual(result, [{ type: 'group', from: 0, to: 3, term: '1' }]);
    t.equal('(1)'.substring(result[0].from, result[0].to), '(1)');
});
test('extract only group', function (t) {
    t.plan(1);
    var result = extract_parenthesys_1.default('one two (group here)');
    t.deepEqual(result, [{ type: 'group', from: 8, to: 20, term: 'group here' }]);
});
test('extract multiple groups', function (t) {
    t.plan(1);
    var result = extract_parenthesys_1.default('(one) (two)');
    t.deepEqual(result, [
        { type: 'group', from: 0, to: 5, term: 'one' },
        { type: 'group', from: 6, to: 11, term: 'two' }
    ]);
});
test('extract super-group of embedded', function (t) {
    t.plan(1);
    var result = extract_parenthesys_1.default('(one OR (two AND three))');
    t.deepEqual(result, [
        { type: 'group', from: 0, to: 24, term: 'one OR (two AND three)' }
    ]);
});
test('quotes does not extract other stuff', function (t) {
    t.plan(1);
    var result = extract_quoted_1.default('this is (not extracted)');
    t.deepEqual([], result);
});
test('extract quoted of simple string', function (t) {
    t.plan(1);
    var result = extract_quoted_1.default('"test"');
    t.deepEqual([{ type: 'term', from: 0, to: 6, term: 'test' }], result);
});
test('concat to previous extracted items', function (t) {
    t.plan(1);
    var result = extract_quoted_1.default('not match', [{ type: 'term', from: 0, to: 6, term: 'test' }]);
    t.deepEqual([{ type: 'term', from: 0, to: 6, term: 'test' }], result);
});
test('extract multiple quoted entries from string', function (t) {
    t.plan(3);
    var str = '"1" n "2"';
    var result = extract_quoted_1.default(str);
    t.deepEqual([
        { type: 'term', from: 0, to: 3, term: '1' },
        { type: 'term', from: 6, to: 9, term: '2' }
    ], result);
    t.deepEqual('"1"', str.substring(result[0].from, result[0].to));
    t.deepEqual('"2"', str.substring(result[1].from, result[1].to));
});
test('extract single quoted with spaces', function (t) {
    t.plan(2);
    var str = '"hello world"';
    var result = extract_quoted_1.default(str);
    t.deepEquals([
        { type: 'term', from: 0, to: 13, term: 'hello world' }
    ], result);
    t.deepEquals(str, str.substring(result[0].from, result[0].to));
});
test('parse loose words of empty', function (t) {
    t.plan(1);
    var result = extract_loose_words_1.default('');
    t.deepEquals(result, []);
});
test('parse loose words concats the accumulated tokens', function (t) {
    t.plan(1);
    var acc = [{ type: 'term', from: 0, to: 4, term: 'test' }];
    var result = extract_loose_words_1.default('', acc);
    t.deepEquals(result, acc);
});
test('parse loose words simple', function (t) {
    t.plan(1);
    var result = extract_loose_words_1.default('test');
    t.deepEquals(result, [{ type: 'term', from: 0, to: 4, term: 'test' }]);
});
test('parse loose words multiple', function (t) {
    t.plan(1);
    var result = extract_loose_words_1.default('hello world');
    t.deepEquals(result, [
        { type: 'term', from: 0, to: 5, term: 'hello' },
        { type: 'term', from: 6, to: 11, term: 'world' }
    ]);
});
test('parse simple predicates', function (t) {
    t.plan(1);
    var result = extract_predicates_1.default('hello:world');
    t.deepEquals(result, [
        { type: 'filter', from: 0, to: 11, term: 'world', predicate: 'hello' }
    ]);
});
test('parse predicates from longer string', function (t) {
    t.plan(2);
    var result = extract_predicates_1.default('assay:RNA-Seq cancer');
    t.deepEquals(result, [
        { type: 'filter', from: 0, to: 13, term: 'RNA-Seq', predicate: 'assay' }
    ]);
    result = extract_predicates_1.default('cancer AND assay:RNA-Seq AND ');
    t.deepEquals(result, [
        { type: 'filter', from: 11, to: 24, term: 'RNA-Seq', predicate: 'assay' }
    ]);
});
test('parse multiple predicates', function (t) {
    t.plan(1);
    var result = extract_predicates_1.default('glioblastoma assay:RNA-Seq assay:RNA-seq');
    t.deepEquals(result, [
        { type: 'filter', from: 13, to: 26, term: 'RNA-Seq', predicate: 'assay' },
        { type: 'filter', from: 27, to: 40, term: 'RNA-seq', predicate: 'assay' }
    ]);
});
test('parse with spaces around colon', function (t) {
    t.plan(1);
    var result = extract_predicates_1.default('glioblastoma assay : RNA-Seq assay:RNA-seq');
    t.deepEquals(result, [
        { type: 'filter', from: 13, to: 28, term: 'RNA-Seq', predicate: 'assay' },
        { type: 'filter', from: 29, to: 42, term: 'RNA-seq', predicate: 'assay' }
    ]);
});
test('predicate parsing should support quoted terms', function (t) {
    t.plan(2);
    var result = extract_predicates_1.default('assay:"Whole Genome Sequencing"');
    t.deepEquals(result, [
        { type: 'filter', from: 0, to: 31, term: 'Whole Genome Sequencing', predicate: 'assay' }
    ]);
    result = extract_predicates_1.default('glioblastoma assay : RNA-Seq assay:RNA-seq assay : "Whole Genome Sequencing" AND');
    t.deepEquals(result, [
        { type: 'filter', from: 13, to: 28, term: 'RNA-Seq', predicate: 'assay' },
        { type: 'filter', from: 29, to: 42, term: 'RNA-seq', predicate: 'assay' },
        { type: 'filter', from: 43, to: 76, term: 'Whole Genome Sequencing', predicate: 'assay' }
    ]);
});
test('predicate parsing should be robust to empty strings', function (t) {
    t.plan(1);
    var result = extract_predicates_1.default('');
    t.deepEquals(result, []);
});
test('predicate parsing should be robust to regular tokens', function (t) {
    t.plan(1);
    var result = extract_predicates_1.default('cancer');
    t.deepEquals(result, []);
});
test('predicate parsing should be robust to stray colons', function (t) {
    t.plan(3);
    var result = extract_predicates_1.default('cancer:');
    t.deepEquals(result, []);
    result = extract_predicates_1.default('cancer :');
    t.deepEquals(result, []);
    result = extract_predicates_1.default('cancer : ');
    t.deepEquals(result, []);
});
test('predicate parser should add results to accumulator', function (t) {
    t.plan(1);
    var result = extract_predicates_1.default('cancer', [
        { type: 'filter', from: 13, to: 28, term: 'RNA-Seq', predicate: 'assay' },
        { type: 'filter', from: 29, to: 42, term: 'RNA-seq', predicate: 'assay' },
        { type: 'filter', from: 43, to: 76, term: 'Whole Genome Sequencing', predicate: 'assay' }
    ]);
    t.deepEquals(result, [
        { type: 'filter', from: 13, to: 28, term: 'RNA-Seq', predicate: 'assay' },
        { type: 'filter', from: 29, to: 42, term: 'RNA-seq', predicate: 'assay' },
        { type: 'filter', from: 43, to: 76, term: 'Whole Genome Sequencing', predicate: 'assay' }
    ]);
});
test('tokenStripper - basic usage', function (t) {
    t.plan(1);
    var str = 'test';
    var tokens = [{ type: 'term', from: 0, to: 4, term: 'test' }];
    var result = query_parser_1.tokenStripper(str, tokens);
    t.deepEqual(result, []);
});
test('tokenStripper - multiple tokens', function (t) {
    t.plan(1);
    var str = '"quoted here" AND (group)';
    var tokens = [
        { type: 'term', from: 0, to: 13, term: 'quoted here' },
        { type: 'group', from: 18, to: 25, term: 'group' }
    ];
    var result = query_parser_1.tokenStripper(str, tokens);
    t.deepEqual(result, [{ from: 13, to: 18, term: ' AND ' }]);
});
test('tokenStripper - multiple tokens and nothing left', function (t) {
    t.plan(1);
    var str = 'one two';
    var tokens = [
        { type: 'term', from: 0, to: 3, term: 'one' },
        { type: 'bo', from: 3, to: 4, term: 'AND' },
        { type: 'term', from: 4, to: 7, term: 'two' }
    ];
    var result = query_parser_1.tokenStripper(str, tokens);
    t.deepEqual(result, []);
});
test('tokenStripper - multiple tokens and stuff left', function (t) {
    t.plan(1);
    var str = 'one two tree four';
    var tokens = [
        { type: 'term', from: 0, to: 3, term: 'one' },
        { type: 'term', from: 4, to: 7, term: 'two' },
        { type: 'term', from: 8, to: 12, term: 'three' }
    ];
    var result = query_parser_1.tokenStripper(str, tokens);
    t.deepEqual(result, [{ from: 3, to: 4, term: ' ' }, { from: 7, to: 8, term: ' ' }, { from: 12, to: 17, term: ' four' }]);
});
test('tokenStripper - strip with nothing', function (t) {
    t.plan(1);
    var str = 'one';
    var tokens = [];
    var result = query_parser_1.tokenStripper(str, tokens);
    t.deepEqual(result, [{ from: 0, to: 3, term: 'one' }]);
});
test('extract starting NOT', function (t) {
    t.plan(1);
    var input = 'NOT glaucoma';
    var result = [{ type: 'not', from: 0, to: 4, term: 'NOT' }];
    t.deepEqual(extract_NOT_1.default(input), result);
});
test('extract NOT from implicit AND NOT', function (t) {
    t.plan(1);
    var input = 'a NOT glaucoma';
    var result = [{ type: 'not', from: 2, to: 6, term: 'NOT' }];
    t.deepEqual(extract_NOT_1.default(input), result);
});
test('extract NOT from explicit AND NOT', function (t) {
    t.plan(1);
    var input = 'a AND NOT something';
    var result = [{ type: 'not', from: 6, to: 10, term: 'NOT' }];
    t.deepEqual(extract_NOT_1.default(input), result);
});
test('boolean parser', function (t) {
    t.plan(1);
    var input = 'glaucoma AND ';
    var result = [{ type: 'bo', from: 8, to: 13, term: 'AND' }];
    t.deepEqual(extract_explicit_boolean_1.default(input), result);
});
test('boolean parser OR', function (t) {
    t.plan(1);
    var input = 'one OR another';
    var result = [{ type: 'bo', from: 3, to: 7, term: 'OR' }];
    t.deepEqual(extract_explicit_boolean_1.default(input), result);
});
test('boolean parser multiple', function (t) {
    t.plan(1);
    var input = 'one AND another OR these';
    var result = [{ type: 'bo', from: 3, to: 8, term: 'AND' }, { type: 'bo', from: 15, to: 19, term: 'OR' }];
    t.deepEqual(extract_explicit_boolean_1.default(input), result);
});
test('boolean parser implicit simple', function (t) {
    t.plan(1);
    var input = ' ';
    var result = [{ type: 'bo', from: 0, to: 1, term: 'AND' }];
    t.deepEqual(extract_implicit_boolean_1.default(input), result);
});
test('boolean parser implicit multiple spaces', function (t) {
    t.plan(1);
    var input = '   ';
    var result = [{ type: 'bo', from: 0, to: 1, term: 'AND' }];
    t.deepEqual(extract_implicit_boolean_1.default(input), result);
});
test('boolean parser implicit sandwitch', function (t) {
    t.plan(1);
    var input = 'a b';
    var result = [{ type: 'bo', from: 1, to: 2, term: 'AND' }];
    t.deepEqual(extract_implicit_boolean_1.default(input), result);
});
test('boolean parser implicit double', function (t) {
    t.plan(1);
    var input = ' a ';
    var result = [{ type: 'bo', from: 0, to: 1, term: 'AND' }, { type: 'bo', from: 2, to: 3, term: 'AND' }];
    t.deepEqual(extract_implicit_boolean_1.default(input), result);
});
test('tokenizer - extract tokens from simple strng', function (t) {
    t.plan(1);
    var str = 'test';
    var tokens = [{ type: 'term', from: 0, to: 4, term: 'test' }];
    var result = query_parser_1.tokenizer(str);
    t.deepEqual(result, tokens);
});
test('tokenizer - extract tokens from group string', function (t) {
    t.plan(1);
    var str = '(one OR two)';
    var tokens = [
        { type: 'group', from: 0, to: 12, term: 'one OR two' }
    ];
    var result = query_parser_1.tokenizer(str);
    t.deepEqual(result, tokens);
});
test('tokenizer - extract tokens from simple explicit boolean', function (t) {
    t.plan(1);
    var str = 'one AND two';
    var tokens = [
        { type: 'term', from: 0, to: 3, term: 'one' },
        { type: 'bo', from: 3, to: 8, term: 'AND' },
        { type: 'term', from: 8, to: 11, term: 'two' }
    ];
    var result = query_parser_1.tokenizer(str);
    t.deepEqual(result, tokens);
});
test('tokenizer - extract tokens from simple implicit boolean', function (t) {
    t.plan(1);
    var str = 'one two';
    var tokens = [
        { type: 'term', from: 0, to: 3, term: 'one' },
        { type: 'bo', from: 3, to: 4, term: 'AND' },
        { type: 'term', from: 4, to: 7, term: 'two' }
    ];
    var result = query_parser_1.tokenizer(str);
    t.deepEqual(result, tokens);
});
test('tokenizer - extract tokens from all parsers', function (t) {
    t.plan(1);
    var str = 'one "two" NOT (group)';
    var tokens = [
        { type: 'term', from: 0, to: 3, term: 'one' },
        { type: 'bo', from: 3, to: 4, term: 'AND' },
        { type: 'term', from: 4, to: 9, term: 'two' },
        { type: 'bo', from: 9, to: 10, term: 'AND' },
        { type: 'not', from: 10, to: 14, term: 'NOT' },
        { type: 'group', from: 14, to: 21, term: 'group' }
    ];
    var result = query_parser_1.tokenizer(str);
    t.deepEqual(result, tokens);
});
//# sourceMappingURL=data:application/json;base64,