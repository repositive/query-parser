"use strict";
var ramda_1 = require('ramda');
var b_exp_tree_1 = require("../b-exp-tree");
var index_1 = require("../b-tree/index");
function getPath(tree, id, acc) {
    if (acc === void 0) { acc = []; }
    if (tree._id === id) {
        return ramda_1.append(tree._id, acc);
    }
    else if (index_1.isBTree(tree)) {
        var newAcc = ramda_1.append(tree._id, acc);
        return (tree.left ? getPath(tree.left, id, newAcc) : null) || (tree.right ? getPath(tree.right, id, newAcc) : null);
    }
    else {
        return null;
    }
}
exports.getPath = getPath;
function removeNodeByID(tree, id) {
    console.log("\n\n\nid: " + id + "\n\n\n");
    return index_1.map(tree, function (t, l, r) {
        if (index_1.isBTree(t) && t.value === 'NOT' && !l && !r)
            return null;
        if (index_1.isBTree(t) && t.value !== 'NOT' && !l)
            return r;
        if (index_1.isBTree(t) && t.value !== 'NOT' && !r)
            return l;
        if (t && t._id === id)
            return null;
        if (index_1.isBTree(t))
            return new index_1.default(t.value, l, r);
        return t;
    });
}
exports.removeNodeByID = removeNodeByID;
function getFilters(tree) {
    return index_1.filter(tree, b_exp_tree_1.isFilter);
}
exports.getFilters = getFilters;
function removeFilter(tree, predicate, text) {
    var filtered = index_1.filter(tree, function (val) {
        return b_exp_tree_1.isFilter(val) && val.text === text && val.predicate === predicate;
    });
    if (filtered.length === 0)
        return tree;
    return removeNodeByID(tree, filtered[0]._id);
}
exports.removeFilter = removeFilter;
function addFilter(tree, predicate, text) {
    var filtered = index_1.filter(tree, (function (t) {
        return b_exp_tree_1.isFilter(t) && t.predicate === predicate;
    }));
    var exists = filtered.filter(function (f) { return f.text === text; });
    if (exists.length > 0) {
        return tree; // Or throw exception
    }
    else if (filtered.length === 0) {
        return new index_1.default('AND', { text: text, predicate: predicate }, tree);
    }
    else {
        var pred_1 = filtered[0];
        return index_1.map(tree, function (t, l, r) {
            if (b_exp_tree_1.isFilter(t) && t._id === pred_1._id) {
                return new index_1.default('OR', { text: text, predicate: predicate }, t);
            }
            else if (index_1.isBTree(t)) {
                return new index_1.default(t.value, l, r);
            }
            else if (b_exp_tree_1.isTerm(t)) {
                return t;
            }
        });
    }
}
exports.addFilter = addFilter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYWluL29wZXJhdGlvbnMvZmlsdGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0JBQXFCLE9BQU8sQ0FBQyxDQUFBO0FBRTdCLDJCQUEyRSxlQUFlLENBQUMsQ0FBQTtBQUMzRixzQkFBd0QsaUJBQWlCLENBQUMsQ0FBQTtBQUUxRSxpQkFBd0IsSUFBd0IsRUFBRSxFQUFVLEVBQUUsR0FBa0I7SUFBbEIsbUJBQWtCLEdBQWxCLFFBQWtCO0lBQzlFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQixNQUFNLENBQUMsY0FBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUNELElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQyxlQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLElBQU0sTUFBTSxHQUFHLGNBQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDckgsQ0FBQztJQUNELElBQUksQ0FBQyxDQUFDO1FBQ0osTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUM7QUFDSCxDQUFDO0FBWGUsZUFBTyxVQVd0QixDQUFBO0FBRUQsd0JBQStCLElBQXdCLEVBQUUsRUFBVTtJQUNqRSxPQUFPLENBQUMsR0FBRyxDQUFDLGVB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