"use strict";
var ramda_1 = require('ramda');
var b_exp_tree_1 = require("../b-exp-tree");
var index_1 = require("../b-tree/index");
var uuid_1 = require('uuid');
function getPath(tree, id, acc) {
    if (acc === void 0) { acc = []; }
    if (tree._id === id) {
        return ramda_1.append(tree._id, acc);
    }
    else if (index_1.isBTree(tree)) {
        var newAcc = ramda_1.append(tree._id, acc);
        return (tree.left ? getPath(tree.left, id, newAcc) : null) || (tree.right ? getPath(tree.right, id, newAcc) : null);
    }
    else {
        return null;
    }
}
exports.getPath = getPath;
function removeNodeByID(tree, id) {
    console.log("\n\n\nid: " + id + "\n\n\n");
    return index_1.map(tree, function (t, l, r) {
        if (index_1.isBTree(t) && t.value === 'NOT' && !l && !r)
            return null;
        if (index_1.isBTree(t) && t.value !== 'NOT' && !l)
            return r;
        if (index_1.isBTree(t) && t.value !== 'NOT' && !r)
            return l;
        if (t && t._id === id)
            return null;
        if (index_1.isBTree(t))
            return new index_1.default(t.value, l, r);
        return t;
    });
}
exports.removeNodeByID = removeNodeByID;
function getFilters(tree) {
    return index_1.filter(tree, b_exp_tree_1.isFilter);
}
exports.getFilters = getFilters;
function removeFilter(tree, predicate, text) {
    var filtered = index_1.filter(tree, function (val) {
        return b_exp_tree_1.isFilter(val) && val.text === text && val.predicate === predicate;
    });
    if (filtered.length === 0)
        return tree;
    return removeNodeByID(tree, filtered[0]._id);
}
exports.removeFilter = removeFilter;
function addFilter(tree, predicate, text) {
    var filtered = index_1.filter(tree, (function (t) {
        return b_exp_tree_1.isFilter(t) && t.predicate === predicate;
    }));
    var exists = filtered.filter(function (f) { return f.text === text; });
    if (exists.length > 0) {
        return tree; // Or throw exception
    }
    else if (filtered.length === 0) {
        if (!tree)
            return { _id: uuid_1.v4(), text: text, predicate: predicate };
        else
            return new index_1.default('AND', { _id: uuid_1.v4(), text: text, predicate: predicate }, tree);
    }
    else {
        var pred_1 = filtered[0];
        return index_1.map(tree, function (t, l, r) {
            if (b_exp_tree_1.isFilter(t) && t._id === pred_1._id) {
                return new index_1.default('OR', { _id: uuid_1.v4(), text: text, predicate: predicate }, t);
            }
            else if (index_1.isBTree(t)) {
                return new index_1.default(t.value, l, r);
            }
            else if (b_exp_tree_1.isTerm(t)) {
                return t;
            }
        });
    }
}
exports.addFilter = addFilter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYWluL29wZXJhdGlvbnMvZmlsdGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0JBQXFCLE9BQU8sQ0FBQyxDQUFBO0FBRTdCLDJCQUEyRSxlQUFlLENBQUMsQ0FBQTtBQUMzRixzQkFBd0QsaUJBQWlCLENBQUMsQ0FBQTtBQUMxRSxxQkFBMEIsTUFBTSxDQUFDLENBQUE7QUFFakMsaUJBQXdCLElBQXdCLEVBQUUsRUFBVSxFQUFFLEdBQWtCO0lBQWxCLG1CQUFrQixHQUFsQixRQUFrQjtJQUM5RSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEIsTUFBTSxDQUFDLGNBQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFDRCxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUMsZUFBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixJQUFNLE1BQU0sR0FBRyxjQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO0lBQ3JILENBQUM7SUFDRCxJQUFJLENBQUMsQ0FBQztRQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQztBQVhlLGVBQU8sVUFXdEIsQ0FBQTtBQUVELHdCQUErQixJQUF3QixFQUFFLEVBQVU7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