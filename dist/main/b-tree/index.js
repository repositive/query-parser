"use strict";
var uuid_1 = require('uuid');
function isBTree(o) {
    return typeof o === 'object' &&
        o.value !== undefined &&
        o.value !== null;
}
exports.isBTree = isBTree;
function fold(tree, f, acc) {
    if (!tree)
        return acc;
    if (isBTree(tree)) {
        var newAcc = f(acc, tree.value);
        return fold(tree.right, f, fold(tree.left, f, newAcc));
    }
    else {
        return f(acc, tree);
    }
}
exports.fold = fold;
function filter(tree, f) {
    return fold(tree, function (acc, val) {
        if (f(val)) {
            return val;
        }
        else {
            return acc;
        }
    }, null);
}
exports.filter = filter;
//export function map<T, R>(f: (T) => R, tree: T): BTree<R, R> {
//  if (!tree) return null;
//  else if (isBTree(tree)) {
//    const newValue = f(tree.value);
//    const left = map(f, tree.left);
//    const right = map(f, tree.right);
//    let result = <BTree<R, R>> {};
//    return result;
//  }
//  else {
//    return f(tree);
//  }
//}
var BTreeImp = (function () {
    function BTreeImp(value, l, r) {
        this._id = uuid_1.v4();
        this.value = value;
        this.left = isBTree(l) ? BTreeImp.fromJS(l) : l || null;
        this.right = isBTree(r) ? BTreeImp.fromJS(r) : r || null;
        Object.freeze(this);
    }
    BTreeImp.prototype.fold = function (f, acc) {
        return fold(this, f, acc);
    };
    BTreeImp.prototype.filter = function (f) {
        return filter(this, f);
    };
    //map<R>(f: (T) => R): BTree<R> {
    //  return map(f, this);
    //}
    BTreeImp.fromJS = function (o) {
        return o instanceof BTreeImp ? o : new BTreeImp(o.value, o.left, o.right);
    };
    return BTreeImp;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BTreeImp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbWFpbi9iLXRyZWUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUF5QixNQUFNLENBQUMsQ0FBQTtBQVFoQyxpQkFBOEIsQ0FBTTtJQUNsQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssUUFBUTtRQUMxQixDQUFDLENBQUMsS0FBSyxLQUFLLFNBQVM7UUFDckIsQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUM7QUFDckIsQ0FBQztBQUplLGVBQU8sVUFJdEIsQ0FBQTtBQUlELGNBQThCLElBQXFCLEVBQUUsQ0FBd0IsRUFBRSxHQUFNO0lBQ25GLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUN0QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLElBQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUNELElBQUksQ0FBQyxDQUFDO1FBQ0osTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztBQUNILENBQUM7QUFUZSxZQUFJLE9BU25CLENBQUE7QUFFRCxnQkFBNkIsSUFBcUIsRUFBRSxDQUEwQjtJQUM1RSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFDLEdBQUcsRUFBRSxHQUFHO1FBQ3pCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWCxNQUFNLENBQUMsR0FBRyxDQUFBO1FBQ1osQ0FBQztRQUNELElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUNiLENBQUM7SUFDSCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDWCxDQUFDO0FBVGUsY0FBTSxTQVNyQixDQUFBO0FBRUQsZ0VBQWdFO0FBQ2hFLDJCQUEyQjtBQUMzQiw2QkFBNkI7QUFDN0IscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQyx1Q0FBdUM7QUFDdkMsb0NBQW9DO0FBQ3BDLG9CQUFvQjtBQUNwQixLQUFLO0FBQ0wsVUFBVTtBQUNWLHFCQUFxQjtBQUNyQixLQUFLO0FBQ0wsR0FBRztBQUVIO0lBTUUsa0JBQVksS0FBUSxFQUFFLENBQW1CLEVBQUUsQ0FBbUI7UUFDNUQsSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFJLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDeEQsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELHVCQUFJLEdBQUosVUFBUSxDQUFjLEVBQUUsR0FBTTtRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELHlCQUFNLEdBQU4sVUFBTyxDQUEwQjtRQUMvQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsaUNBQWlDO0lBQ2pDLHdCQUF3QjtJQUN4QixHQUFHO0lBRUksZUFBTSxHQUFiLFVBQW9CLENBQWM7UUFDaEMsTUFBTSxDQUFDLENBQUMsWUFBWSxRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUNILGVBQUM7QUFBRCxDQUFDLEFBN0JELElBNkJDO0FBN0JEOzBCQTZCQyxDQUFBIn0=