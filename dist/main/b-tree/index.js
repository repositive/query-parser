"use strict";
var uuid_1 = require('uuid');
var ramda_1 = require('ramda');
function isBTree(o) {
    return o &&
        typeof o === 'object' &&
        o.value !== undefined &&
        o.value !== null;
}
exports.isBTree = isBTree;
function fold(tree, f, acc) {
    if (!tree)
        return acc;
    if (isBTree(tree)) {
        return f(tree, fold(tree.left, f, acc), fold(tree.right, f, acc));
    }
    else {
        return f(tree, acc, acc);
    }
}
exports.fold = fold;
function map(tree, f) {
    return fold(tree, f, null);
}
exports.map = map;
function mapLeafs(tree, f) {
    if (isBTree(tree)) {
        return {
            value: tree.value,
            left: mapLeafs(tree.left, f),
            right: mapLeafs(tree.right, f)
        };
    }
    else {
        return f(tree);
    }
}
exports.mapLeafs = mapLeafs;
function filter(tree, f) {
    return fold(tree, function (val, l, r) {
        var acc = ramda_1.concat(l, r);
        if (f(val)) {
            return ramda_1.append(val, acc);
        }
        else {
            return acc;
        }
    }, []);
}
exports.filter = filter;
var BTreeImp = (function () {
    function BTreeImp(value, l, r) {
        this._id = uuid_1.v4();
        this.value = value;
        this.left = isBTree(l) ? BTreeImp.fromJS(l) : l || null;
        this.right = isBTree(r) ? BTreeImp.fromJS(r) : r || null;
        Object.freeze(this);
    }
    BTreeImp.prototype.fold = function (f, acc) {
        return fold(this, f, acc);
    };
    BTreeImp.prototype.filter = function (f) {
        return filter(this, f);
    };
    BTreeImp.fromJS = function (o) {
        return o instanceof BTreeImp ? o : new BTreeImp(o.value, o.left, o.right);
    };
    return BTreeImp;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BTreeImp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbWFpbi9iLXRyZWUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUF5QixNQUFNLENBQUMsQ0FBQTtBQUNoQyxzQkFBNkIsT0FBTyxDQUFDLENBQUE7QUFRckMsaUJBQThCLENBQU07SUFDbEMsTUFBTSxDQUFDLENBQUM7UUFDTixPQUFPLENBQUMsS0FBSyxRQUFRO1FBQ3JCLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUztRQUNyQixDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQztBQUNyQixDQUFDO0FBTGUsZUFBTyxVQUt0QixDQUFBO0FBRUQsY0FBOEIsSUFBcUIsRUFBRSxDQUE2QyxFQUFFLEdBQU07SUFDeEcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ3RCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFDRCxJQUFJLENBQUMsQ0FBQztRQUNKLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDO0FBQ0gsQ0FBQztBQVJlLFlBQUksT0FRbkIsQ0FBQTtBQUVELGFBQWtDLElBQXFCLEVBQUUsQ0FBdUc7SUFDOUosTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFGZSxXQUFHLE1BRWxCLENBQUE7QUFF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