"use strict";
const uuid_1 = require('uuid');
function isBTree(o) {
    return typeof o === 'object' &&
        o.value !== undefined &&
        o.value !== null;
}
exports.isBTree = isBTree;
function fold(tree, f, acc) {
    if (!tree)
        return acc;
    if (isBTree(tree)) {
        const newAcc = f(acc, tree.value);
        return fold(tree.right, f, fold(tree.left, f, newAcc));
    }
    else {
        return f(acc, tree);
    }
}
exports.fold = fold;
function filter(tree, f) {
    return fold(tree, (acc, val) => {
        if (f(val)) {
            return val;
        }
        else {
            return acc;
        }
    }, null);
}
exports.filter = filter;
//export function map<T, R>(f: (T) => R, tree: T): BTree<R, R> {
//  if (!tree) return null;
//  else if (isBTree(tree)) {
//    const newValue = f(tree.value);
//    const left = map(f, tree.left);
//    const right = map(f, tree.right);
//    let result = <BTree<R, R>> {};
//    return result;
//  }
//  else {
//    return f(tree);
//  }
//}
class BTreeImp {
    constructor(value, l, r) {
        this._id = uuid_1.v4();
        this.value = value;
        this.left = isBTree(l) ? BTreeImp.fromJS(l) : l || null;
        this.right = isBTree(r) ? BTreeImp.fromJS(r) : r || null;
        Object.freeze(this);
    }
    fold(f, acc) {
        return fold(this, f, acc);
    }
    filter(f) {
        return filter(this, f);
    }
    //map<R>(f: (T) => R): BTree<R> {
    //  return map(f, this);
    //}
    static fromJS(o) {
        return o instanceof BTreeImp ? o : new BTreeImp(o.value, o.left, o.right);
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BTreeImp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbWFpbi9iLXRyZWUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHVCQUF5QixNQUFNLENBQUMsQ0FBQTtBQVFoQyxpQkFBOEIsQ0FBTTtJQUNsQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssUUFBUTtRQUMxQixDQUFDLENBQUMsS0FBSyxLQUFLLFNBQVM7UUFDckIsQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUM7QUFDckIsQ0FBQztBQUplLGVBQU8sVUFJdEIsQ0FBQTtBQUlELGNBQThCLElBQXFCLEVBQUUsQ0FBd0IsRUFBRSxHQUFNO0lBQ25GLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUN0QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUNELElBQUksQ0FBQyxDQUFDO1FBQ0osTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztBQUNILENBQUM7QUFUZSxZQUFJLE9BU25CLENBQUE7QUFFRCxnQkFBNkIsSUFBcUIsRUFBRSxDQUEwQjtJQUM1RSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHO1FBQ3pCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWCxNQUFNLENBQUMsR0FBRyxDQUFBO1FBQ1osQ0FBQztRQUNELElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUNiLENBQUM7SUFDSCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDWCxDQUFDO0FBVGUsY0FBTSxTQVNyQixDQUFBO0FBRUQsZ0VBQWdFO0FBQ2hFLDJCQUEyQjtBQUMzQiw2QkFBNkI7QUFDN0IscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQyx1Q0FBdUM7QUFDdkMsb0NBQW9DO0FBQ3BDLG9CQUFvQjtBQUNwQixLQUFLO0FBQ0wsVUFBVTtBQUNWLHFCQUFxQjtBQUNyQixLQUFLO0FBQ0wsR0FBRztBQUVIO0lBTUUsWUFBWSxLQUFRLEVBQUUsQ0FBbUIsRUFBRSxDQUFtQjtRQUM1RCxJQUFJLENBQUMsR0FBRyxHQUFHLFNBQUksRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQztRQUN4RCxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDekQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSSxDQUFJLENBQWMsRUFBRSxHQUFNO1FBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsTUFBTSxDQUFDLENBQTBCO1FBQy9CLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxpQ0FBaUM7SUFDakMsd0JBQXdCO0lBQ3hCLEdBQUc7SUFFSCxPQUFPLE1BQU0sQ0FBTyxDQUFjO1FBQ2hDLE1BQU0sQ0FBQyxDQUFDLFlBQVksUUFBUSxHQUFHLENBQUMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVFLENBQUM7QUFDSCxDQUFDO0FBN0JEOzBCQTZCQyxDQUFBIn0=