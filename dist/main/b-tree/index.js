"use strict";
var uuid_1 = require('uuid');
var ramda_1 = require('ramda');
function isBTree(o) {
    return o &&
        typeof o === 'object' &&
        o.value !== undefined &&
        o.value !== null;
}
exports.isBTree = isBTree;
function fold(tree, f, acc) {
    if (!tree)
        return acc;
    if (isBTree(tree)) {
        var newAcc = f(acc, tree);
        return fold(tree.right, f, fold(tree.left, f, newAcc));
    }
    else {
        return f(acc, tree);
    }
}
exports.fold = fold;
function map(tree, f) {
    if (isBTree(tree)) {
        var left = map(tree.left, f);
        var right = map(tree.right, f);
        return f(tree, left, right);
    }
    else {
        return f(tree);
    }
}
exports.map = map;
function mapLeafs(tree, f) {
    if (isBTree(tree)) {
        return {
            value: tree.value,
            left: mapLeafs(tree.left, f),
            right: mapLeafs(tree.right, f)
        };
    }
    else {
        return f(tree);
    }
}
exports.mapLeafs = mapLeafs;
function filter(tree, f) {
    return fold(tree, function (acc, val) {
        if (f(val)) {
            return ramda_1.append(val, acc);
        }
        else {
            return acc;
        }
    }, []);
}
exports.filter = filter;
var BTreeImp = (function () {
    function BTreeImp(value, l, r) {
        this._id = uuid_1.v4();
        this.value = value;
        this.left = isBTree(l) ? BTreeImp.fromJS(l) : l || null;
        this.right = isBTree(r) ? BTreeImp.fromJS(r) : r || null;
        Object.freeze(this);
    }
    BTreeImp.prototype.fold = function (f, acc) {
        return fold(this, f, acc);
    };
    BTreeImp.prototype.filter = function (f) {
        return filter(this, f);
    };
    BTreeImp.fromJS = function (o) {
        return o instanceof BTreeImp ? o : new BTreeImp(o.value, o.left, o.right);
    };
    return BTreeImp;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BTreeImp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbWFpbi9iLXRyZWUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUF5QixNQUFNLENBQUMsQ0FBQTtBQUNoQyxzQkFBcUIsT0FBTyxDQUFDLENBQUE7QUFRN0IsaUJBQThCLENBQU07SUFDbEMsTUFBTSxDQUFDLENBQUM7UUFDTixPQUFPLENBQUMsS0FBSyxRQUFRO1FBQ3JCLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUztRQUNyQixDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQztBQUNyQixDQUFDO0FBTGUsZUFBTyxVQUt0QixDQUFBO0FBRUQsY0FBOEIsSUFBcUIsRUFBRSxDQUFrQyxFQUFFLEdBQU07SUFDN0YsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ3RCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsSUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFDRCxJQUFJLENBQUMsQ0FBQztRQUNKLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7QUFDSCxDQUFDO0FBVGUsWUFBSSxPQVNuQixDQUFBO0FBRUQsYUFBa0MsSUFBcUIsRUFBRSxDQUFtRztJQUN4SixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLElBQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9CLElBQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUM3QixDQUFDO0lBQ0QsSUFBSSxDQUFDLENBQUM7UUFDSixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLENBQUM7QUFDTCxDQUFDO0FBVGUsV0FBRyxNQVNsQixDQUFBO0FBRUQsa0JBQThCLElBQW9CLEVBQUUsQ0FBaUI7SUFDbkUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixNQUFNLENBQUM7WUFDSCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUM1QixLQUFLLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQy9CLENBQUM7SUFDSixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLENBQUM7QUFDSCxDQUFDO0FBVmUsZ0JBQVEsV0FVdkIsQ0FBQTtBQUVELGdCQUE2QixJQUFxQixFQUFFLENBQW1DO0lBQ3JGLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFVBQUMsR0FBRyxFQUFFLEdBQUc7UUFDekIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNYLE1BQU0sQ0FBQyxjQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLENBQUM7UUFDRCxJQUFJLENBQUMsQ0FBQztZQUNKLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDYixDQUFDO0lBQ0gsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsQ0FBQztBQVRlLGNBQU0sU0FTckIsQ0FBQTtBQUVEO0lBTUUsa0JBQVksS0FBUSxFQUFFLENBQW1CLEVBQUUsQ0FBbUI7UUFDNUQsSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFJLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDeEQsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELHVCQUFJLEdBQUosVUFBUSxDQUFjLEVBQUUsR0FBTTtRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELHlCQUFNLEdBQU4sVUFBTyxDQUFtQztRQUN4QyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRU0sZUFBTSxHQUFiLFVBQW9CLENBQWM7UUFDaEMsTUFBTSxDQUFDLENBQUMsWUFBWSxRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUNILGVBQUM7QUFBRCxDQUFDLEFBekJELElBeUJDO0FBekJEOzBCQXlCQyxDQUFBIn0=