"use strict";
var uuid_1 = require('uuid');
var ramda_1 = require('ramda');
function isBTree(o) {
    return o &&
        typeof o === 'object' &&
        o.value !== undefined &&
        o.value !== null;
}
exports.isBTree = isBTree;
function fold(tree, f, acc) {
    if (!tree)
        return acc;
    if (isBTree(tree)) {
        return f(tree, fold(tree.left, f, acc), fold(tree.right, f, acc));
    }
    else {
        return f(tree, acc, acc);
    }
}
exports.fold = fold;
function map(tree, f) {
    if (isBTree(tree)) {
        var left = map(tree.left, f);
        var right = map(tree.right, f);
        return f(tree, left, right);
    }
    else {
        return f(tree);
    }
}
exports.map = map;
function mapLeafs(tree, f) {
    if (isBTree(tree)) {
        return {
            value: tree.value,
            left: mapLeafs(tree.left, f),
            right: mapLeafs(tree.right, f)
        };
    }
    else {
        return f(tree);
    }
}
exports.mapLeafs = mapLeafs;
function filter(tree, f) {
    return fold(tree, function (val, l, r) {
        var acc = ramda_1.concat(l, r);
        if (f(val)) {
            return ramda_1.append(val, acc);
        }
        else {
            return acc;
        }
    }, []);
}
exports.filter = filter;
var BTreeImp = (function () {
    function BTreeImp(value, l, r) {
        this._id = uuid_1.v4();
        this.value = value;
        this.left = isBTree(l) ? BTreeImp.fromJS(l) : l || null;
        this.right = isBTree(r) ? BTreeImp.fromJS(r) : r || null;
        Object.freeze(this);
    }
    BTreeImp.prototype.fold = function (f, acc) {
        return fold(this, f, acc);
    };
    BTreeImp.prototype.filter = function (f) {
        return filter(this, f);
    };
    BTreeImp.fromJS = function (o) {
        return o instanceof BTreeImp ? o : new BTreeImp(o.value, o.left, o.right);
    };
    return BTreeImp;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BTreeImp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbWFpbi9iLXRyZWUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUF5QixNQUFNLENBQUMsQ0FBQTtBQUNoQyxzQkFBNkIsT0FBTyxDQUFDLENBQUE7QUFRckMsaUJBQThCLENBQU07SUFDbEMsTUFBTSxDQUFDLENBQUM7UUFDTixPQUFPLENBQUMsS0FBSyxRQUFRO1FBQ3JCLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUztRQUNyQixDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQztBQUNyQixDQUFDO0FBTGUsZUFBTyxVQUt0QixDQUFBO0FBRUQsY0FBOEIsSUFBcUIsRUFBRSxDQUE2QyxFQUFFLEdBQU07SUFDeEcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ3RCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFDRCxJQUFJLENBQUMsQ0FBQztRQUNKLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDO0FBQ0gsQ0FBQztBQVJlLFlBQUksT0FRbkIsQ0FBQTtBQUVELGFBQWtDLElBQXFCLEVBQUUsQ0FBbUc7SUFDeEosRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixJQUFNLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFD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